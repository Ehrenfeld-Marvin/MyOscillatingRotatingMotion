/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2012-2018 OpenFOAM Foundation
    Copyright (C) 2015-2020 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "writeFile.H"
#include "Time.H"
#include "polyMesh.H"
#include "IFstream.H"
#include "functionObject.H"

// * * * * * * * * * * * * Protected Member Functions  * * * * * * * * * * * //


Foam::autoPtr<Foam::OFstream> Foam::functionObjects::writeFile::createFile
(
    const word& name,
    scalar timeValue
) const
{
    autoPtr<OFstream> osPtr;

    if (Pstream::master() && writeToFile_)
    {
        if (useUserTime_)
        {
            timeValue = fileObr_.time().timeToUserTime(timeValue);
        }

        const word timeName = Time::timeName(timeValue);

//        fileName outputDir(baseFileDir()/prefix_/timeName);

//        mkDir(outputDir);

        word fName(name);

        // Check if file already exists
        IFstream is(outputDir/(fName + ".dat"));
        if (is.good())
        {
            fName = fName + "_" + timeName;
        }

        osPtr.reset(new OFstream(outputDir/(fName + ".dat")));

        if (!osPtr->good())
        {
            FatalIOErrorInFunction(osPtr()) << "Cannot open file"
                << exit(FatalIOError);
        }

        initStream(osPtr());
    }

    return osPtr;
}

Foam::autoPtr<Foam::OFstream> Foam::functionObjects::writeFile::createFile
(
    const word& name
) const
{
    return createFile(name, startTime_);

}



// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

Foam::functionObjects::writeFile::writeFile(const writeFile& wf)
:
    fileObr_(wf.fileObr_),
    prefix_(wf.prefix_),
    fileName_(wf.fileName_),
    filePtr_(nullptr),
    writeToFile_(wf.writeToFile_),
    useUserTime_(wf.useUserTime_),
{}


Foam::functionObjects::writeFile::writeFile
(
    const objectRegistry& obr,
    const fileName& prefix,
    const word& name,
    const bool writeToFile
)
:
    fileObr_(obr),
    prefix_(prefix),
    fileName_(name),
    filePtr_(nullptr),
    writeToFile_(writeToFile),
    useUserTime_(true),
{}


Foam::functionObjects::writeFile::writeFile
(
    const objectRegistry& obr,
    const fileName& prefix,
    const word& name,
    const dictionary& dict,
    const bool writeToFile
)
:
    writeFile(obr, prefix, name, writeToFile)
{
    read(dict);

    if (writeToFile_)
    {
        filePtr_ = createFile(fileName_);
    }
}

