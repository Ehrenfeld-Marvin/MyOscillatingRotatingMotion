/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         cellLimited Gauss linear 1.0;
   // grad(T)         Gauss linear;
}

divSchemes
{
    default         none;
    div(U)          Gauss linear;
    div(phi,U)      Gauss linearUpwind grad(U);
    div(phi,k)      Gauss linearUpwind grad(U);
    div(phi,K)      Gauss linearUpwind grad(U);
    div(phi,omega)  Gauss linearUpwind grad(U);
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    div(phi,nuTilda) Gauss limitedLinear 1;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    div(yPhi,yWall)       Gauss linear corrected;

}


laplacianSchemes
{
    default         Gauss linear corrected;
    laplacian(diffusivity,cellDisplacement)  Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
//    reconstruct(omega) limitedVanLeer 1e-15 1e6;
}

snGradSchemes
{
    default         corrected;
}

wallDist
{
//    method meshWave;
//    correctWalls  true;
//        method exactDistanuuuce;
        method advectionDiffusion;

        // Optional entry enabling the calculation
        // of the normal-to-wall field
        nRequired false;

        advectionDiffusionCoeffs
        {
            method    Poisson;
            epsilon   0.1;
            tolerance 1e-3;
            maxIter   10;
        }
}


fluxRequired
{
    default         no;
    pcorr           ;
    p               ;
}

// ************************************************************************* //
